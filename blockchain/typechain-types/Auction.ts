/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AuctionInterface extends Interface {
  getFunction(nameOrSignature: "addnftToAuction"): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "NewBid" | "nftAdded" | "nftDeleted" | "nftOwned"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addnftToAuction",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addnftToAuction",
    data: BytesLike
  ): Result;
}

export namespace NewBidEvent {
  export type InputTuple = [
    nftId: BigNumberish,
    bidder: AddressLike,
    currentAmount: BigNumberish
  ];
  export type OutputTuple = [
    nftId: bigint,
    bidder: string,
    currentAmount: bigint
  ];
  export interface OutputObject {
    nftId: bigint;
    bidder: string;
    currentAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace nftAddedEvent {
  export type InputTuple = [
    name: string,
    description: string,
    nftOwner: AddressLike,
    startingPrice: BigNumberish,
    endAuctionTime: BigNumberish
  ];
  export type OutputTuple = [
    name: string,
    description: string,
    nftOwner: string,
    startingPrice: bigint,
    endAuctionTime: bigint
  ];
  export interface OutputObject {
    name: string;
    description: string;
    nftOwner: string;
    startingPrice: bigint;
    endAuctionTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace nftDeletedEvent {
  export type InputTuple = [nftId: BigNumberish];
  export type OutputTuple = [nftId: bigint];
  export interface OutputObject {
    nftId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace nftOwnedEvent {
  export type InputTuple = [nftId: BigNumberish];
  export type OutputTuple = [nftId: bigint];
  export interface OutputObject {
    nftId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Auction extends BaseContract {
  connect(runner?: ContractRunner | null): Auction;
  waitForDeployment(): Promise<this>;

  interface: AuctionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addnftToAuction: TypedContractMethod<
    [
      name: string,
      description: string,
      startingPrice: BigNumberish,
      duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addnftToAuction"
  ): TypedContractMethod<
    [
      name: string,
      description: string,
      startingPrice: BigNumberish,
      duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "NewBid"
  ): TypedContractEvent<
    NewBidEvent.InputTuple,
    NewBidEvent.OutputTuple,
    NewBidEvent.OutputObject
  >;
  getEvent(
    key: "nftAdded"
  ): TypedContractEvent<
    nftAddedEvent.InputTuple,
    nftAddedEvent.OutputTuple,
    nftAddedEvent.OutputObject
  >;
  getEvent(
    key: "nftDeleted"
  ): TypedContractEvent<
    nftDeletedEvent.InputTuple,
    nftDeletedEvent.OutputTuple,
    nftDeletedEvent.OutputObject
  >;
  getEvent(
    key: "nftOwned"
  ): TypedContractEvent<
    nftOwnedEvent.InputTuple,
    nftOwnedEvent.OutputTuple,
    nftOwnedEvent.OutputObject
  >;

  filters: {
    "NewBid(uint256,address,uint256)": TypedContractEvent<
      NewBidEvent.InputTuple,
      NewBidEvent.OutputTuple,
      NewBidEvent.OutputObject
    >;
    NewBid: TypedContractEvent<
      NewBidEvent.InputTuple,
      NewBidEvent.OutputTuple,
      NewBidEvent.OutputObject
    >;

    "nftAdded(string,string,address,uint256,uint256)": TypedContractEvent<
      nftAddedEvent.InputTuple,
      nftAddedEvent.OutputTuple,
      nftAddedEvent.OutputObject
    >;
    nftAdded: TypedContractEvent<
      nftAddedEvent.InputTuple,
      nftAddedEvent.OutputTuple,
      nftAddedEvent.OutputObject
    >;

    "nftDeleted(uint256)": TypedContractEvent<
      nftDeletedEvent.InputTuple,
      nftDeletedEvent.OutputTuple,
      nftDeletedEvent.OutputObject
    >;
    nftDeleted: TypedContractEvent<
      nftDeletedEvent.InputTuple,
      nftDeletedEvent.OutputTuple,
      nftDeletedEvent.OutputObject
    >;

    "nftOwned(uint256)": TypedContractEvent<
      nftOwnedEvent.InputTuple,
      nftOwnedEvent.OutputTuple,
      nftOwnedEvent.OutputObject
    >;
    nftOwned: TypedContractEvent<
      nftOwnedEvent.InputTuple,
      nftOwnedEvent.OutputTuple,
      nftOwnedEvent.OutputObject
    >;
  };
}
